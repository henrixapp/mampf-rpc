// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: mampf.proto

package grpc

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Course struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                 string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ShortTitle            string                 `protobuf:"bytes,5,opt,name=short_title,json=shortTitle,proto3" json:"short_title,omitempty"`
	Organizational        bool                   `protobuf:"varint,6,opt,name=organizational,proto3" json:"organizational,omitempty"`
	OrganizationalConcept string                 `protobuf:"bytes,7,opt,name=organizational_concept,json=organizationalConcept,proto3" json:"organizational_concept,omitempty"`
	Locale                string                 `protobuf:"bytes,8,opt,name=locale,proto3" json:"locale,omitempty"`
	TermIndependent       bool                   `protobuf:"varint,9,opt,name=term_independent,json=termIndependent,proto3" json:"term_independent,omitempty"`
	ImageData             string                 `protobuf:"bytes,10,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
}

func (x *Course) Reset() {
	*x = Course{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Course) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Course) ProtoMessage() {}

func (x *Course) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Course.ProtoReflect.Descriptor instead.
func (*Course) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{0}
}

func (x *Course) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Course) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Course) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Course) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Course) GetShortTitle() string {
	if x != nil {
		return x.ShortTitle
	}
	return ""
}

func (x *Course) GetOrganizational() bool {
	if x != nil {
		return x.Organizational
	}
	return false
}

func (x *Course) GetOrganizationalConcept() string {
	if x != nil {
		return x.OrganizationalConcept
	}
	return ""
}

func (x *Course) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Course) GetTermIndependent() bool {
	if x != nil {
		return x.TermIndependent
	}
	return false
}

func (x *Course) GetImageData() string {
	if x != nil {
		return x.ImageData
	}
	return ""
}

type Lecture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CourseId              int32                  `protobuf:"varint,4,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	TermId                int32                  `protobuf:"varint,5,opt,name=term_id,json=termId,proto3" json:"term_id,omitempty"`
	TeacherId             int32                  `protobuf:"varint,6,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	StartChapter          int32                  `protobuf:"varint,7,opt,name=start_chapter,json=startChapter,proto3" json:"start_chapter,omitempty"`
	AbsoluteNumbering     bool                   `protobuf:"varint,8,opt,name=absolute_numbering,json=absoluteNumbering,proto3" json:"absolute_numbering,omitempty"`
	StartSection          int32                  `protobuf:"varint,9,opt,name=start_section,json=startSection,proto3" json:"start_section,omitempty"`
	OrganizationalConcept string                 `protobuf:"bytes,10,opt,name=organizational_concept,json=organizationalConcept,proto3" json:"organizational_concept,omitempty"`
	Organizational        bool                   `protobuf:"varint,11,opt,name=organizational,proto3" json:"organizational,omitempty"`
	Muesli                bool                   `protobuf:"varint,12,opt,name=muesli,proto3" json:"muesli,omitempty"`
	Released              string                 `protobuf:"bytes,13,opt,name=released,proto3" json:"released,omitempty"`
	ContentMode           string                 `protobuf:"bytes,14,opt,name=content_mode,json=contentMode,proto3" json:"content_mode,omitempty"`
	Passphrase            string                 `protobuf:"bytes,15,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Locale                string                 `protobuf:"bytes,16,opt,name=locale,proto3" json:"locale,omitempty"`
	Sort                  string                 `protobuf:"bytes,17,opt,name=sort,proto3" json:"sort,omitempty"`
	ForumId               int32                  `protobuf:"varint,18,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`
	StructureIds          string                 `protobuf:"bytes,19,opt,name=structure_ids,json=structureIds,proto3" json:"structure_ids,omitempty"`
	CommentsDisabled      bool                   `protobuf:"varint,20,opt,name=comments_disabled,json=commentsDisabled,proto3" json:"comments_disabled,omitempty"`
	OrganizationalOnTop   bool                   `protobuf:"varint,21,opt,name=organizational_on_top,json=organizationalOnTop,proto3" json:"organizational_on_top,omitempty"`
	DisableTeacherDisplay bool                   `protobuf:"varint,22,opt,name=disable_teacher_display,json=disableTeacherDisplay,proto3" json:"disable_teacher_display,omitempty"`
}

func (x *Lecture) Reset() {
	*x = Lecture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lecture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lecture) ProtoMessage() {}

func (x *Lecture) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lecture.ProtoReflect.Descriptor instead.
func (*Lecture) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{1}
}

func (x *Lecture) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lecture) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Lecture) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Lecture) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *Lecture) GetTermId() int32 {
	if x != nil {
		return x.TermId
	}
	return 0
}

func (x *Lecture) GetTeacherId() int32 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *Lecture) GetStartChapter() int32 {
	if x != nil {
		return x.StartChapter
	}
	return 0
}

func (x *Lecture) GetAbsoluteNumbering() bool {
	if x != nil {
		return x.AbsoluteNumbering
	}
	return false
}

func (x *Lecture) GetStartSection() int32 {
	if x != nil {
		return x.StartSection
	}
	return 0
}

func (x *Lecture) GetOrganizationalConcept() string {
	if x != nil {
		return x.OrganizationalConcept
	}
	return ""
}

func (x *Lecture) GetOrganizational() bool {
	if x != nil {
		return x.Organizational
	}
	return false
}

func (x *Lecture) GetMuesli() bool {
	if x != nil {
		return x.Muesli
	}
	return false
}

func (x *Lecture) GetReleased() string {
	if x != nil {
		return x.Released
	}
	return ""
}

func (x *Lecture) GetContentMode() string {
	if x != nil {
		return x.ContentMode
	}
	return ""
}

func (x *Lecture) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *Lecture) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Lecture) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *Lecture) GetForumId() int32 {
	if x != nil {
		return x.ForumId
	}
	return 0
}

func (x *Lecture) GetStructureIds() string {
	if x != nil {
		return x.StructureIds
	}
	return ""
}

func (x *Lecture) GetCommentsDisabled() bool {
	if x != nil {
		return x.CommentsDisabled
	}
	return false
}

func (x *Lecture) GetOrganizationalOnTop() bool {
	if x != nil {
		return x.OrganizationalOnTop
	}
	return false
}

func (x *Lecture) GetDisableTeacherDisplay() bool {
	if x != nil {
		return x.DisableTeacherDisplay
	}
	return false
}

//simplified User model To be extended!
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Email int32  `protobuf:"varint,2,opt,name=email,proto3" json:"email,omitempty"`
	Admin bool   `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
	Name  string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetEmail() int32 {
	if x != nil {
		return x.Email
	}
	return 0
}

func (x *User) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Term struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Year      int32                  `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	Season    string                 `protobuf:"bytes,3,opt,name=season,proto3" json:"season,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Active    bool                   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *Term) Reset() {
	*x = Term{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Term) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Term) ProtoMessage() {}

func (x *Term) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Term.ProtoReflect.Descriptor instead.
func (*Term) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{3}
}

func (x *Term) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Term) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Term) GetSeason() string {
	if x != nil {
		return x.Season
	}
	return ""
}

func (x *Term) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Term) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Term) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type LecturesQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lectures []*Lecture `protobuf:"bytes,1,rep,name=lectures,proto3" json:"lectures,omitempty"`
}

func (x *LecturesQueryResult) Reset() {
	*x = LecturesQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LecturesQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LecturesQueryResult) ProtoMessage() {}

func (x *LecturesQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LecturesQueryResult.ProtoReflect.Descriptor instead.
func (*LecturesQueryResult) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{4}
}

func (x *LecturesQueryResult) GetLectures() []*Lecture {
	if x != nil {
		return x.Lectures
	}
	return nil
}

type LecturesByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *LecturesByUserRequest) Reset() {
	*x = LecturesByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LecturesByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LecturesByUserRequest) ProtoMessage() {}

func (x *LecturesByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LecturesByUserRequest.ProtoReflect.Descriptor instead.
func (*LecturesByUserRequest) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{5}
}

func (x *LecturesByUserRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type TermRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TermId int32 `protobuf:"varint,1,opt,name=term_id,json=termId,proto3" json:"term_id,omitempty"`
}

func (x *TermRequest) Reset() {
	*x = TermRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermRequest) ProtoMessage() {}

func (x *TermRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermRequest.ProtoReflect.Descriptor instead.
func (*TermRequest) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{6}
}

func (x *TermRequest) GetTermId() int32 {
	if x != nil {
		return x.TermId
	}
	return 0
}

type TermsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TermsRequest) Reset() {
	*x = TermsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermsRequest) ProtoMessage() {}

func (x *TermsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermsRequest.ProtoReflect.Descriptor instead.
func (*TermsRequest) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{7}
}

func (x *TermsRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type TermsRequestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms []*Term `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *TermsRequestResult) Reset() {
	*x = TermsRequestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermsRequestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermsRequestResult) ProtoMessage() {}

func (x *TermsRequestResult) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermsRequestResult.ProtoReflect.Descriptor instead.
func (*TermsRequestResult) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{8}
}

func (x *TermsRequestResult) GetTerms() []*Term {
	if x != nil {
		return x.Terms
	}
	return nil
}

type LoginInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginInformation) Reset() {
	*x = LoginInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginInformation) ProtoMessage() {}

func (x *LoginInformation) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginInformation.ProtoReflect.Descriptor instead.
func (*LoginInformation) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{9}
}

func (x *LoginInformation) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginInformation) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	User    *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *LoginResult) Reset() {
	*x = LoginResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResult) ProtoMessage() {}

func (x *LoginResult) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResult.ProtoReflect.Descriptor instead.
func (*LoginResult) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{10}
}

func (x *LoginResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LoginResult) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UserLookUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserLookUp) Reset() {
	*x = UserLookUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mampf_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLookUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLookUp) ProtoMessage() {}

func (x *UserLookUp) ProtoReflect() protoreflect.Message {
	mi := &file_mampf_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLookUp.ProtoReflect.Descriptor instead.
func (*UserLookUp) Descriptor() ([]byte, []int) {
	return file_mampf_proto_rawDescGZIP(), []int{11}
}

func (x *UserLookUp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_mampf_proto protoreflect.FileDescriptor

var file_mampf_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x61, 0x6d, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d,
	0x61, 0x6d, 0x70, 0x66, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x74, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb8,
	0x06, 0x0a, 0x07, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x62,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x75, 0x65, 0x73, 0x6c, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d,
	0x75, 0x65, 0x73, 0x6c, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x54, 0x6f,
	0x70, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x56, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xd0, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x41, 0x0a, 0x13, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x61, 0x6d, 0x70, 0x66, 0x2e, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x15, 0x4c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x0b, 0x54, 0x65, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x72, 0x6d, 0x49,
	0x64, 0x22, 0x27, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x12, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x21, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x6d, 0x61, 0x6d, 0x70, 0x66, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x05, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x48, 0x0a, 0x0b, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x6d, 0x61, 0x6d, 0x70, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x22, 0x1c, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x55,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x32, 0x65, 0x0a, 0x13, 0x4d, 0x61, 0x4d, 0x70, 0x66, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c,
	0x2e, 0x6d, 0x61, 0x6d, 0x70, 0x66, 0x2e, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d,
	0x61, 0x6d, 0x70, 0x66, 0x2e, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x7a, 0x0a, 0x10, 0x4d, 0x61, 0x4d, 0x70,
	0x66, 0x54, 0x65, 0x72, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x6d, 0x70, 0x66, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x6d, 0x61,
	0x6d, 0x70, 0x66, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x3a, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x6d, 0x70, 0x66, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x6d, 0x70,
	0x66, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x76, 0x0a, 0x10, 0x4d, 0x61, 0x4d, 0x70, 0x66, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x6d, 0x70, 0x66, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x6d,
	0x70, 0x66, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c,
	0x0a, 0x0a, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x6d,
	0x61, 0x6d, 0x70, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x1a,
	0x0b, 0x2e, 0x6d, 0x61, 0x6d, 0x70, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x21, 0x5a, 0x1f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x6e, 0x72, 0x69,
	0x78, 0x61, 0x70, 0x70, 0x2f, 0x6d, 0x61, 0x6d, 0x70, 0x66, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mampf_proto_rawDescOnce sync.Once
	file_mampf_proto_rawDescData = file_mampf_proto_rawDesc
)

func file_mampf_proto_rawDescGZIP() []byte {
	file_mampf_proto_rawDescOnce.Do(func() {
		file_mampf_proto_rawDescData = protoimpl.X.CompressGZIP(file_mampf_proto_rawDescData)
	})
	return file_mampf_proto_rawDescData
}

var file_mampf_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_mampf_proto_goTypes = []interface{}{
	(*Course)(nil),                // 0: mampf.Course
	(*Lecture)(nil),               // 1: mampf.Lecture
	(*User)(nil),                  // 2: mampf.User
	(*Term)(nil),                  // 3: mampf.Term
	(*LecturesQueryResult)(nil),   // 4: mampf.LecturesQueryResult
	(*LecturesByUserRequest)(nil), // 5: mampf.LecturesByUserRequest
	(*TermRequest)(nil),           // 6: mampf.TermRequest
	(*TermsRequest)(nil),          // 7: mampf.TermsRequest
	(*TermsRequestResult)(nil),    // 8: mampf.TermsRequestResult
	(*LoginInformation)(nil),      // 9: mampf.LoginInformation
	(*LoginResult)(nil),           // 10: mampf.LoginResult
	(*UserLookUp)(nil),            // 11: mampf.UserLookUp
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_mampf_proto_depIdxs = []int32{
	12, // 0: mampf.Course.created_at:type_name -> google.protobuf.Timestamp
	12, // 1: mampf.Course.updated_at:type_name -> google.protobuf.Timestamp
	12, // 2: mampf.Lecture.created_at:type_name -> google.protobuf.Timestamp
	12, // 3: mampf.Lecture.updated_at:type_name -> google.protobuf.Timestamp
	12, // 4: mampf.Term.created_at:type_name -> google.protobuf.Timestamp
	12, // 5: mampf.Term.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 6: mampf.LecturesQueryResult.lectures:type_name -> mampf.Lecture
	3,  // 7: mampf.TermsRequestResult.terms:type_name -> mampf.Term
	2,  // 8: mampf.LoginResult.user:type_name -> mampf.User
	5,  // 9: mampf.MaMpfLectureService.GetLecturesForUser:input_type -> mampf.LecturesByUserRequest
	6,  // 10: mampf.MaMpfTermService.GetTerm:input_type -> mampf.TermRequest
	7,  // 11: mampf.MaMpfTermService.GetTerms:input_type -> mampf.TermsRequest
	9,  // 12: mampf.MaMpfAuthService.Login:input_type -> mampf.LoginInformation
	11, // 13: mampf.MaMpfAuthService.LookUpUser:input_type -> mampf.UserLookUp
	4,  // 14: mampf.MaMpfLectureService.GetLecturesForUser:output_type -> mampf.LecturesQueryResult
	3,  // 15: mampf.MaMpfTermService.GetTerm:output_type -> mampf.Term
	8,  // 16: mampf.MaMpfTermService.GetTerms:output_type -> mampf.TermsRequestResult
	10, // 17: mampf.MaMpfAuthService.Login:output_type -> mampf.LoginResult
	2,  // 18: mampf.MaMpfAuthService.LookUpUser:output_type -> mampf.User
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_mampf_proto_init() }
func file_mampf_proto_init() {
	if File_mampf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mampf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Course); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mampf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lecture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mampf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mampf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Term); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mampf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LecturesQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mampf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LecturesByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mampf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mampf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mampf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermsRequestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mampf_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mampf_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mampf_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLookUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mampf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_mampf_proto_goTypes,
		DependencyIndexes: file_mampf_proto_depIdxs,
		MessageInfos:      file_mampf_proto_msgTypes,
	}.Build()
	File_mampf_proto = out.File
	file_mampf_proto_rawDesc = nil
	file_mampf_proto_goTypes = nil
	file_mampf_proto_depIdxs = nil
}
